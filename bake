#!/bin/bash
# bake [-f file] [-v]

bake_file=
verbose=
while getopts "f:v" option; do
  case $option in
    f)
      bake_file=$OPTARG
      ;;
    v)
      verbose=1
      ;;
  esac
done

run_file() {
  bake_script=`mktemp -t bake_tmp.XXX`
  while read -r line; do
    echo "$line" >> $bake_script
  done <<< "`cat $1`"
  if [[ -n $verbose ]]; then
    cat $bake_script | bash --verbose
  else
    cat $bake_script | bash
  fi
  rm $bake_script
}

# Looks for the nearest Bakefile in the current directory and its parent
# directories
find_file() {
  # Loop until a Bakefile is found or / is reached
  while true; do

    # If there is a Bakefile here, echo its path and return
    if [ -f Bakefile ]; then
      # TODO: Fix a bug where a Bakefile in / has a path of "//Bakefile"
      echo `pwd`/Bakefile
      return
    # Else if we have looked through all the parent directories, return
    elif [ `pwd` == "/" ]; then
      return
    # Otherwise, cd into the parent directory and keep looping
    else
      cd ..
    fi

  done
}

# Taken from the argument completion for GNU Make
list_tasks() {
  cat $1 | awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}'
}

main() {
  if [ -n "$bake_file" ]; then
    run_file $bake_file
  else
    bake_file=`find_file`
    if [ -n "$bake_file" ]; then
      if [ `dirname $bake_file` != `pwd` ]; then
        echo "(in `dirname $bake_file`)"
      fi
      run_file $bake_file
    else
      echo "bake: Aborted. No Bakefile found."
    fi
  fi
}

main
